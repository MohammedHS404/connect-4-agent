# -*- coding: utf-8 -*-
"""AIProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hd_ImKy6a_6Cr9yhBx4PtMwKQkdlCMRx
"""

# Define board dimensions
ROWS = 6
COLS = 7

# Create empty board
board = [['-' for j in range(COLS)] for i in range(ROWS)]

# Print initial board state
def print_board(board):
    for row in board:
        print('|' + '|'.join(row) + '|')
    print(' ' + '-'.join(['-' for i in range(COLS)]))
print_board(board)

def get_player_input(player):
    while True:
        try:
            col = int(input(f"Player {player}, choose a column (1-{COLS}): ")) - 1
            if col < 0 or col >= COLS:
                print(f"Column must be between 1 and {COLS}")
            else:
                return col
        except ValueError:
            print("Invalid input. Please enter a number.")

def add_piece(board, col, piece):
    for row in range(ROWS-1, -1, -1):
        if board[row][col] == '-':
            board[row][col] = piece
            return True
    return False

def check_win(board, piece):
    # Check rows for win
    for row in range(ROWS):
        for col in range(COLS-3):
            if board[row][col] == piece and board[row][col+1] == piece and board[row][col+2] == piece and board[row][col+3] == piece:
                return True
    
    # Check columns for win
    for col in range(COLS):
        for row in range(ROWS-3):
            if board[row][col] == piece and board[row+1][col] == piece and board[row+2][col] == piece and board[row+3][col] == piece:
                return True
    
    # Check diagonal (down-right) for win
    for col in range(COLS-3):
        for row in range(ROWS-3):
            if board[row][col] == piece and board[row+1][col+1] == piece and board[row+2][col+2] == piece and board[row+3][col+3] == piece:
                return True
    
    # Check diagonal (up-right) for win
    for col in range(COLS-3):
        for row in range(3, ROWS):
            if board[row][col] == piece and board[row-1][col+1] == piece and board[row-2][col+2] == piece and board[row-3][col+3] == piece:
                return True
    
    return False

def switch_players(player):
    if player == 1:
        return 2
    else:
        return 1

# Play game
player = 1

while True:
    # Get player input
    col = get_player_input(player)

    # Add piece to board
    if not add_piece(board, col, 'X' if player == 1 else 'O'):
        print("Column is full. Please choose another column.")
        continue

    # Check for win
    if check_win(board, 'X' if player == 1 else 'O'):
        print(f"Player {player} wins!")
        break

    # Switch players
    player = switch_players(player)

    # Print board
    print_board(board)
